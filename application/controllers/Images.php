<?phpif (!defined('BASEPATH')) {    exit('No direct script access allowed');}require APPPATH . '/libraries/BaseController.php';/** * Class : User (UserController) * User Class to control all user related operations. * * @author : Kishor Mali * * @version : 1.1 * * @since : 15 November 2016 */class Images extends BaseController{    /**     * This is default constructor of the class.     */    public function __construct()    {        parent::__construct();        $this->load->model('images_model');        $this->load->model('User_model');        $this->load->model('categories_model');        $this->load->model('UserCategories_model');        $this->load->model('DevicesList_model');        $this->load->helper('pushnotifications_helper');        $this->isLoggedIn();    }    /**     * This function is used to load the user list.     */    public function imagesListing()    {        if (true == $this->isUser()) {            $this->loadThis();        } else {            $searchText = $this->security->xss_clean($this->input->post('searchText'));            $data['searchText'] = $searchText;            $this->load->library('pagination');            $count = $this->images_model->imagesListingCount($searchText);            $returns = $this->paginationCompress('imageListing/', $count, 10);            $data['imagesRecords'] = $this->images_model->imagesListing($searchText, $returns['page'], $returns['segment']);            $this->global['pageTitle'] = 'InfoCards : Images Listing';            $this->loadViews('images/images', $this->global, $data, null);        }    }    /**     * This function is used to load the add new form.     */    public function addNew()    {        if (true == $this->isAdmin()) {            $this->loadThis();        } else {            //$this->load->model('images_model');            $data['categories'] = $this->categories_model->getCategories();            $this->global['pageTitle'] = 'InfoCards : Add New Image';            $this->loadViews('images/add', $this->global, $data, null);        }    }    /**     * This function is used to add new user to the system.     */    public function addNewImage()    {        if (true == $this->isUser()) {            $this->loadThis();        } else {            $this->load->library('form_validation');            $this->load->helper('file');            $this->form_validation->set_rules('categoryId', 'categoryId', 'trim|required|numeric');            $this->form_validation->set_rules('imageName', 'Card Name', 'trim|required');            if (empty($_FILES['image']['name'][0])) {                $this->form_validation->set_rules('image[]', 'Document', 'required');            }            if (false == $this->form_validation->run()) {                $this->addNew();            } else {                $categoryId = $this->input->post('categoryId');                $imageName = $this->input->post('imageName');                $imageLink = $this->input->post('imageLink') ? $this->input->post('imageLink') : '';                $imageTags = $this->input->post('imageTags') ? $this->input->post('imageTags') : '';                $uploadedFile = [];                if ($imageTags) {                    $imageTagsArray = explode(",", $imageTags);                    $imageTags = json_encode($imageTagsArray);                }                $images_count = count($_FILES['image']['name']);                for ($i = 0; $i < $images_count; $i++) {                    $config['upload_path'] = 'assets/uploads/images/' . $imageName . time() . "/";                    $config['allowed_types'] = 'jpg|png|jpeg';                    $_FILES['img']['name'] = $_FILES['image']['name'][$i];                    $_FILES['img']['type'] = $_FILES['image']['type'][$i];                    $_FILES['img']['tmp_name'] = $_FILES['image']['tmp_name'][$i];                    $_FILES['img']['error'] = $_FILES['image']['error'][$i];                    $_FILES['img']['size'] = $_FILES['image']['size'][$i];                    if (!is_dir($config['upload_path'])) {                        mkdir($config['upload_path'], 0777, TRUE);                    }                    $this->load->library('upload', $config);                    if ($this->upload->do_upload('img')) {                        $uploadData = $this->upload->data();                        $uploadedFile[] = 'assets/uploads/images/' . $imageName . time() . "/" . $uploadData['file_name'];                    } else {                        $this->session->set_flashdata('error', $this->upload->display_errors());                    }                }                $uploadedFiles = json_encode($uploadedFile);                $imageInfo = [                    'categoryId' => $categoryId,                    'imageName' => $imageName,                    'imagePath' => $uploadedFiles,                    'imageTags' => $imageTags,                    'imageLink' => $imageLink,                    'createdAt' => date('Y-m-d H:i:s'),                ];                $this->load->model('images_model');                $result = $this->images_model->addNewImage($imageInfo);                if ($result > 0) {                    $this->session->set_flashdata('success', 'New Image created successfully');                    $devices_list = $this->DevicesList_model->getAllDevices();                    $category = $this->categories_model->getCategoryInfo($categoryId);                    $message = 'new Image has been added in ' . $category->categoryName . ' category';                    foreach ($devices_list as $device) {                        if ($device->firebaseId) {                            $result = sendnotification($device->firebaseId, $message, 'image');                        }                    }                } else {                    $this->session->set_flashdata('error', 'Image creation failed');                }                redirect('imageListing');            }        }    }    /**     * This function is used load user edit information.     *     * @param number $imageId : Optional : This is image id     */    public function editImage($imageId = null)    {        if (true == $this->isUser()) {            $this->loadThis();        } else {            $data['categories'] = $this->categories_model->getCategories();            $data['imageInfo'] = $this->images_model->getImageInfo($imageId);            $this->global['pageTitle'] = 'InfoCards : Edit Image';            $this->loadViews('images/edit', $this->global, $data, null);        }    }    /**     * This function is used to edit the user information.     */    public function editImagePost()    {        if (true == $this->isUser()) {            $this->loadThis();        } else {            $this->load->library('form_validation');            $this->load->helper('file');            $imageId = $this->input->post('imageId');            $this->form_validation->set_rules('categoryId', 'categoryId', 'trim|required|numeric');            $this->form_validation->set_rules('imageName', 'Card Name', 'trim|required');            if (empty($_FILES['image']['name'])) {                $this->form_validation->set_rules('image', 'Document', 'required');            }            if (false == $this->form_validation->run()) {                $this->addNew();            } else {                $categoryId = $this->input->post('categoryId');                $imageName = $this->input->post('imageName');                $imageLink = $this->input->post('imageLink') ? $this->input->post('imageLink') : '';                $imageTags = $this->input->post('imageTags') ? $this->input->post('imageTags') : '';                if ($imageTags) {                    $imageTagsArray = explode(",", $imageTags);                    $imageTags = json_encode($imageTagsArray);                }                $data['imageInfo'] = $this->images_model->getImageInfo($imageId);                $image = explode("/", json_decode($data['imageInfo']->imagePath)[0]);                $folderName = $image[count($image) - 2];                $uploadedFile = json_decode($data['imageInfo']->imagePath);                $images_count = count($_FILES['image']['name']);                if ($images_count) {                    for ($i = 0; $i < $images_count; $i++) {                        $config['upload_path'] = 'assets/uploads/images/' . $folderName . "/";                        $config['allowed_types'] = 'jpg|png|jpeg';                        $_FILES['img']['name'] = $_FILES['image']['name'][$i];                        $_FILES['img']['type'] = $_FILES['image']['type'][$i];                        $_FILES['img']['tmp_name'] = $_FILES['image']['tmp_name'][$i];                        $_FILES['img']['error'] = $_FILES['image']['error'][$i];                        $_FILES['img']['size'] = $_FILES['image']['size'][$i];                        if (!is_dir($config['upload_path'])) {                            mkdir($config['upload_path'], 0777, TRUE);                        }                        $this->load->library('upload', $config);                        if ($this->upload->do_upload('img')) {                            $uploadData = $this->upload->data();                            $uploadedFile[] = 'assets/uploads/images/' . $folderName . "/" . $uploadData['file_name'];                        } else {                            $this->session->set_flashdata('error', $this->upload->display_errors());                        }                    }                    $uploadedFiles = json_encode($uploadedFile);                    $imageInfo = [                        'categoryId' => $categoryId,                        'imageName' => $imageName,                        'imagePath' => $uploadedFiles,                        'imageTags' => $imageTags,                        'imageLink' => $imageLink,                        'createdAt' => date('Y-m-d H:i:s'),                    ];                    $this->load->model('images_model');                    $result = $this->images_model->editImage($imageInfo, $imageId);                    if ($result > 0) {                        $this->session->set_flashdata('success', 'New Image created successfully');                    } else {                        $this->session->set_flashdata('error', 'Image creation failed');                    }                } else {                    $categoryId = $this->input->post('categoryId');                    $imageInfo = [                        'categoryId' => $categoryId,                        'imageName' => $imageName,                        'updatedAt' => date('Y-m-d H:i:s'),                    ];                    $result = $this->images_model->editImage($imageInfo, $imageId);                    if ($result > 0) {                        $this->session->set_flashdata('success', 'New Image created successfully');                    } else {                        $this->session->set_flashdata('error', 'Image creation failed');                    }                }            }            redirect('imageListing');        }    }    /**     * This function is used to delete the user using userId.     *     * @return bool $result : TRUE / FALSE     */    public    function deleteImage()    {        if (true == $this->isAdmin()) {            echo json_encode(['status' => 'access']);        } else {            $imageId = $this->input->post('imageId');            $imageInfo = ['isDeleted' => 1, 'updatedAt' => date('Y-m-d H:i:s')];            $result = $this->images_model->deleteImage($imageId, $imageInfo);            if ($result > 0) {                echo json_encode(['status' => true]);            } else {                echo json_encode(['status' => false]);            }        }    }}